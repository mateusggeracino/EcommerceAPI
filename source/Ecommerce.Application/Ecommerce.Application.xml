<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ecommerce.Application</name>
    </assembly>
    <members>
        <member name="T:Ecommerce.Application.Controllers.OrderController">
            <summary>
            Clase responsável pelo comportamento do pedido (order)
            </summary>
        </member>
        <member name="M:Ecommerce.Application.Controllers.OrderController.FinalizeOrder(Ecommerce.Domain.Models.Payment,System.Int32)">
            <summary>
            Método responsável por finalizar o pedido (order)
            </summary>
            <param name="paymentViewModel"></param>
            <returns></returns>
        </member>
        <member name="M:Ecommerce.Application.Controllers.PaymentMethodController.Get">
            <summary>
            Get All Payment Methods
            </summary>
            <returns>List payment methods</returns>
        </member>
        <member name="T:Ecommerce.Application.Controllers.ShoppingCartsController">
            <summary>
            Esta classe é responsável por todos os comportamentos do
            carrinho de compra
            </summary>
        </member>
        <member name="M:Ecommerce.Application.Controllers.ShoppingCartsController.GetAll">
            <summary>
            Retorno de todos os carrinhos de compras
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecommerce.Application.Controllers.ShoppingCartsController.Get(System.Int32)">
            <summary>
            Retorno do carrinho de compras por id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecommerce.Application.Controllers.ShoppingCartsController.Post(Ecommerce.Application.ViewModels.ShoppingCartsViewModel)">
            <summary>
            Inserção do carrinho de compras
            </summary>
            <param name="shoppingCartsViewModel"></param>
            <returns></returns>
        </member>
        <member name="M:Ecommerce.Application.Controllers.ShoppingCartsController.Put(Ecommerce.Domain.Models.ShoppingCarts)">
            <summary>
            Atualização do Carrinho de Compras
            </summary>
            <param name="shoppingCarts"></param>
            <returns></returns>
        </member>
        <member name="M:Ecommerce.Application.Controllers.ShoppingCartsController.FinalizeShoppingCarts(Ecommerce.Domain.Models.ShoppingCarts)">
            <summary>
            Finalização do Carrinho de Compras
            </summary>
            <param name="shoppingCarts"></param>
        </member>
        <member name="M:Ecommerce.Application.Controllers.ShoppingCartsController.InsertOrder(System.Int32)">
            <summary>
            Método responsável por trazer dados do carrinho em uma view
            e chamar orderServices para inserir
            </summary>
            <param name="shoppingCarts"></param>
            <returns></returns>
        </member>
        <member name="M:Ecommerce.Application.Controllers.ShoppingCartsController.UpdateShoppingCarts(Ecommerce.Domain.Models.ShoppingCarts,System.Int32)">
            <summary>
            Método responsável por atualizar status
            e carUnitPrice do carrinho
            </summary>
            <param name="shoppingCarts"></param>
            <param name="orderId"></param>
        </member>
        <member name="M:Ecommerce.Application.Controllers.ShoppingCartsController.UpdateStockQuantityVirtual(Ecommerce.Domain.Models.ShoppingCarts)">
            <summary>
            Método responsável por atualizar a quantidade 
            virtual em stock
            </summary>
        </member>
        <member name="T:Ecommerce.Application.Controllers.StockController">
            <summary>
            Api responsável por oferecer métodos de estoque
            </summary>
        </member>
        <member name="M:Ecommerce.Application.Controllers.StockController.GetByProduct(System.Int32,System.Int32)">
            <summary>
            Get product by storeId and productId
            </summary>
            <param name="storeId"></param>
            <param name="productId"></param>
            <returns></returns>
        </member>
        <member name="M:Ecommerce.Application.Controllers.StockController.GetAll">
            <summary>
            Get all products
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecommerce.Application.Controllers.StockController.Insert(Ecommerce.Application.ViewModels.StockViewModel)">
            <summary>
            Insert a new stock
            </summary>
            <param name="stock"></param>
            <returns></returns>
        </member>
        <member name="M:Ecommerce.Application.Controllers.StockController.Remove(System.Int32,System.Int32)">
            <summary>
            Remove a stock by storeId and productId
            </summary>
            <param name="storeId"></param>
            <param name="productId"></param>
            <returns></returns>
        </member>
        <member name="M:Ecommerce.Application.Controllers.StockController.Update(Ecommerce.Application.ViewModels.StockViewModel)">
            <summary>
            Update stock
            </summary>
            <param name="stock"></param>
            <returns></returns>
        </member>
        <member name="M:Ecommerce.Application.Extensions.DependencyInjection.DependencyInjectionServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Injeção de dependencia services
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Ecommerce.Application.Extensions.DependencyInjection.DependencyInjectionRepository(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Injeção de dependencia Repository
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Ecommerce.Application.Extensions.DependencyInjection.DependencyInjectionBusiness(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Injeção de dependencia Business
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Ecommerce.Application.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            ConfigureServices AddMVc and Config swagger
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Ecommerce.Application.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.Extensions.Hosting.IHostingEnvironment)">
            <summary>
            Método Configure startup. Usando MVC e Swagger
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
    </members>
</doc>
